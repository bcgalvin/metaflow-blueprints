import { SecretKeySelector } from '../../imports/k8s';
import { EventSourceFilter, TLSConfig, WebhookContext } from '../types';

/**
 * Basic is BasicAuth auth strategy.
 *
 * BitbucketBasicAuth holds the information required to authenticate user via basic auth
 * mechanism
 */
export interface BitbucketBasicAuth {
  /**
   * Password refers to the K8s secret that holds the password.
   */
  readonly password: SecretKeySelector;
  /**
   * Username refers to the K8s secret that holds the username.
   */
  readonly username: SecretKeySelector;
}

/**
 * Auth information required to connect to Bitbucket.
 *
 * BitbucketAuth holds the different auth strategies for connecting to Bitbucket
 */
export interface BitbucketAuth {
  /**
   * Basic is BasicAuth auth strategy.
   */
  readonly basic?: BitbucketBasicAuth;
  /**
   * OAuthToken refers to the K8s secret that holds the OAuth Bearer token.
   */
  readonly oauthToken?: SecretKeySelector;
}

export interface BitbucketRepository {
  /**
   * Owner is the owner of the repository
   */
  readonly owner: string;
  /**
   * RepositorySlug is a URL-friendly version of a repository name, automatically generated by
   * Bitbucket for use in the URL
   */
  readonly repositorySlug: string;
}

/**
 * BitbucketEventSource describes the event source for Bitbucket
 */
export interface BitbucketEventSource {
  /**
   * Auth information required to connect to Bitbucket.
   */
  readonly auth: BitbucketAuth;
  /**
   * DeleteHookOnFinish determines whether to delete the defined Bitbucket hook once the event
   * source is stopped.
   */
  readonly deleteHookOnFinish?: boolean;
  /**
   * Events this webhook is subscribed to.
   */
  readonly events: string[];
  /**
   * Filter
   */
  readonly filter?: EventSourceFilter;
  /**
   * Metadata holds the user defined metadata which will be passed along the event payload.
   */
  readonly metadata?: { [key: string]: string };
  /**
   * DeprecatedOwner is the owner of the repository. Deprecated: use Repositories instead.
   * Will be unsupported in v1.9
   */
  readonly owner?: string;
  /**
   * DeprecatedProjectKey is the key of the project to which the repository relates
   * Deprecated: use Repositories instead. Will be unsupported in v1.9
   */
  readonly projectKey?: string;
  /**
   * Repositories holds a list of repositories for which integration needs to set up
   */
  readonly repositories?: BitbucketRepository[];
  /**
   * DeprecatedRepositorySlug is a URL-friendly version of a repository name, automatically
   * generated by Bitbucket for use in the URL Deprecated: use Repositories instead. Will be
   * unsupported in v1.9
   */
  readonly repositorySlug?: string;
  /**
   * Webhook refers to the configuration required to run an http server
   */
  readonly webhook: WebhookContext;
}

export interface BitbucketServerRepository {
  /**
   * ProjectKey is the key of project for which integration needs to set up.
   */
  readonly projectKey: string;
  /**
   * RepositorySlug is the slug of the repository for which integration needs to set up.
   */
  readonly repositorySlug: string;
}

/**
 * BitbucketServerEventSource refers to event-source related to Bitbucket Server events
 */
export interface BitbucketServerEventSource {
  /**
   * AccessToken is reference to K8s secret which holds the bitbucket api access information.
   */
  readonly accessToken?: SecretKeySelector;
  /**
   * BitbucketServerBaseURL is the base URL for API requests to a custom endpoint.
   */
  readonly bitbucketserverBaseURL: string;
  /**
   * CheckInterval is a duration in which to wait before checking that the webhooks exist,
   * e.g. 1s, 30m, 2h... (defaults to 1m)
   */
  readonly checkInterval?: string;
  /**
   * DeleteHookOnFinish determines whether to delete the Bitbucket Server hook for the project
   * once the event source is stopped.
   */
  readonly deleteHookOnFinish?: boolean;
  /**
   * Events are bitbucket event to listen to. Refer
   * https://confluence.atlassian.com/bitbucketserver/event-payload-938025882.html
   */
  readonly events?: string[];
  /**
   * Filter
   */
  readonly filter?: EventSourceFilter;
  /**
   * Metadata holds the user defined metadata which will passed along the event payload.
   */
  readonly metadata?: { [key: string]: string };
  /**
   * OneEventPerChange controls whether to process each change in a repo:refs_changed webhook
   * event as a separate event. This setting is useful when multiple tags are pushed
   * simultaneously for the same commit, and each tag needs to independently trigger an
   * action, such as a distinct workflow in Argo Workflows. When enabled, the
   * BitbucketServerEventSource publishes an individual BitbucketServerEventData for each
   * change, ensuring independent processing of each tag or reference update in a single
   * webhook event.
   */
  readonly oneEventPerChange?: boolean;
  /**
   * DeprecatedProjectKey is the key of project for which integration needs to set up.
   * Deprecated: use Repositories instead. Will be unsupported in v1.8.
   */
  readonly projectKey?: string;
  /**
   * Projects holds a list of projects for which integration needs to set up, this will add
   * the webhook to all repositories in the project.
   */
  readonly projects?: string[];
  /**
   * Repositories holds a list of repositories for which integration needs to set up.
   */
  readonly repositories?: BitbucketServerRepository[];
  /**
   * DeprecatedRepositorySlug is the slug of the repository for which integration needs to set
   * up. Deprecated: use Repositories instead. Will be unsupported in v1.8.
   */
  readonly repositorySlug?: string;
  /**
   * SkipBranchRefsChangedOnOpenPR bypasses the event repo:refs_changed for branches whenever
   * there's an associated open pull request. This helps in optimizing the event handling
   * process by avoiding unnecessary triggers for branch reference changes that are already
   * part of a pull request under review.
   */
  readonly skipBranchRefsChangedOnOpenPR?: boolean;
  /**
   * TLS configuration for the bitbucketserver client.
   */
  readonly tls?: TLSConfig;
  /**
   * Webhook holds configuration to run a http server.
   */
  readonly webhook?: WebhookContext;
  /**
   * WebhookSecret is reference to K8s secret which holds the bitbucket webhook secret (for
   * HMAC validation).
   */
  readonly webhookSecret?: SecretKeySelector;
}
